Links:
	1.http://www.journaldev.com/1827/java-design-patterns-example-tutorial#singleton-pattern (Types and Theory)
	2.https://www.tutorialspoint.com/design_pattern/singleton_pattern.htm  (Real time example) 

Types:
    A.CREATIONAL DESIGN PATTERNS
        1.(X)	Singleton Pattern
        2.(X)	Factory Pattern
        3.(X)	Abstract Factory Pattern
        4.(X)	Builder Pattern
        5.(X)	Prototype Pattern
    
    B.STRUCTURAL DESIGN PATTERNS
        1.(X) 	Adapter Pattern
        2.(X)	Composite Pattern
        3.(X)	Proxy Pattern
        4.(X)	Flyweight Pattern
        5.(X)	Facade Pattern
        6.(X)	Bridge Pattern
        7.(X)	Decorator Pattern
    C.BEHAVIORAL DESIGN PATTERNS
        1.(X)	Template Method Pattern
        2.(X)	Mediator Pattern
        3.(X)	Chain of Responsibility Pattern
        4.(X)	Observer Pattern
        5.(X)	Strategy Pattern
        6.(X)	Command Pattern
        7.(X)	State Pattern
        8.(X)	Visitor Pattern
        9.(X)	Interpreter Pattern
        10.(X)	Iterator Pattern
        11.(X)	Memento Pattern
        
A.  CREATIONAL DESIGN PATTERNS: provide solution to instantiate a object in the best possible way for specific situations.
B.  STRUCTURAL DESIGN PATTERNS: provide different ways to create a class structure, for example using inheritance 
			   	and composition to create a large object from small objects.
C.	BEHAVIORAL DESIGN PATTERNS: provide solution for the better interaction between objects and how to 
			   	provide lose coupling and flexibility to extend easily.			   
      

1.SINGLETON PATTERN: restricts the instantiation of a class and ensures that only one instance
			   of the class exists in the java virtual machine.

2.FACTORY PATTERN: is used when we have a super class with multiple sub-classes and based on 
				input, we need to return one of the sub-class. This pattern take out the 
				responsibility of instantiation of a class from client program to the factory 
				class. We can apply Singleton pattern on Factory class or make the factory 
				method static. 
				
3.ABSTRACT FACTORY PATTERN: is similar to Factory pattern and itâ€™s factory of factories. 
				If you are familiar with factory design pattern in java, you will notice that 
				we have a single Factory class that returns the different sub-classes based on
				the input provided and factory class uses if-else or switch statement to 
				achieve this. In Abstract Factory pattern, we get rid of if-else block and 
				have a factory class for each sub-class and then an Abstract Factory class 
				that will return the sub-class based on the input factory class. 

4.BUILDER PATTERN: was introduced to solve some of the problems with Factory and Abstract 
				Factory design patterns when the Object contains a lot of attributes. Builder 
				pattern solves the issue with large number of optional parameters and inconsistent 
				state by providing a way to build the object step-by-step and provide a 
				method that will actually return the final Object.

5.PROTOTYPE PATTERN: is used when the Object creation is a costly affair and requires a lot of
 				time and resources and you have a similar object already existing. So this 
 				pattern provides a mechanism to copy the original object to a new object and 
 				then modify it according to our needs. This pattern uses java cloning to copy 
 				the object.Prototype design pattern mandates that the Object which you are 
 				copying should provide the copying feature. It should not be done by any 
 				other class. However whether to use shallow or deep copy of the Object properties 
 				depends on the requirements and its a design decision. 
 				      
      
      